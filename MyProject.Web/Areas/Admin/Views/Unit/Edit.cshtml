@model MyProject.Data.Unit


@{
	ViewBag.Title = "Edit";
	Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<style>
	.video-frame {
		width: 100%;
		height: auto;
		border-radius: 5px;
		padding: 10px;
		/*  //     box-shadow: 0 0.5rem 1.5rem 0.5rem rgb(0 0 0 / 8%);*/
		background-color: rgb(0 0 0 / 8%);
	}

	.video-frame1 {
		width: 100%;
		height: auto;
		border-radius: 5px;
		padding: 10px;
		background-color: rgb(0 0 0 / 8%);
	}
</style>
<div class="content d-flex flex-column flex-column-fluid" id="kt_content">
	<!--begin::Subheader-->
	<div class="subheader py-2 py-lg-12 subheader-transparent" id="kt_subheader">
		<div class="container d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
			<!--begin::Info-->
			<div class="d-flex align-items-center flex-wrap mr-1">
				<!--begin::Heading-->
				<div class="d-flex flex-column">

					<!--begin::Breadcrumb-->
					<div class="d-flex align-items-center font-weight-bold my-2">
						<!--begin::Item-->
						<a href="/Admin/Dashboard/Index" class="opacity-75 hover-opacity-100">
							<i class="flaticon2-shelter text-white icon-1x"></i>
						</a>
						<!--end::Item-->
						<!--begin::Item-->
						<a href="/Admin/Dashboard/Index" class="text-white text-hover-white opacity-75 hover-opacity-100">&nbsp;&nbsp;Dashboard</a>
						<!--end::Item-->
						<!--begin::Item-->
						<span class="label label-dot label-sm bg-white opacity-75 mx-3"></span>
						<a href="javascript:;" class="text-white text-hover-white opacity-75 hover-opacity-100">Units</a>
						<!--end::Item-->
					</div>
					<!--end::Breadcrumb-->
				</div>
				<!--end::Heading-->
			</div>
			<!--end::Info-->
		</div>
	</div>
	<!--end::Subheader-->
	<!--begin::Entry-->
	<div class="d-flex flex-column-fluid">
		<!--begin::Container-->
		<div class="container">
			<!--begin::Dashboard-->
			<div class="row">
				<div class="col-xl-12">
					<!--begin::Card-->
					<div class="card card-custom gutter-b">
						<div class="card-header flex-wrap border-0 pt-6 pb-0">
							<div class="card-title">
								<h3 class="card-label">
									Unit
									<span class="d-block text-muted pt-2 font-size-sm">Update Unit Here...</span>
								</h3>
							</div>
							<div class="card-toolbar">
								<!--begin::Button-->
								<div class="dropdown dropdown-inline mr-2">

								</div>
								<a href="/Admin/unit/index" class="btn btn-custom font-weight-bolder">
									<span class="svg-icon svg-icon-md svg-icon-white">
										<!--begin::Svg Icon | path:assets/media/svg/icons/Design/Flatten.svg-->
										<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
											<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
												<rect x="0" y="0" width="24" height="24" />
												<circle fill="#ffffff" cx="9" cy="15" r="6" />
												<path d="M8.8012943,7.00241953 C9.83837775,5.20768121 11.7781543,4 14,4 C17.3137085,4 20,6.6862915 20,10 C20,12.2218457 18.7923188,14.1616223 16.9975805,15.1987057 C16.9991904,15.1326658 17,15.0664274 17,15 C17,10.581722 13.418278,7 9,7 C8.93357256,7 8.86733422,7.00080962 8.8012943,7.00241953 Z" fill="#ffffff" opacity="0.3" />
											</g>
										</svg>
										<!--end::Svg Icon-->
									</span>Back
								</a>
								<!--end::Button-->
							</div>
						</div>
						<div class="card-body">

							<!--begin: form-->
							<form enctype="multipart/form-data" id="editform">

								@Html.HiddenFor(m => m.ID)
								@Html.AntiForgeryToken()
								<div class="alert alert-danger text-center" id="divMessage" style="display:none"></div>
								@Html.ValidationSummary(false, "", new { @class = "text-danger" })
								<div class="col-lg-12 text-center">
									<div class="image-input image-input-outline" id="kt_image_1">
										@if (string.IsNullOrEmpty(Model.Thumbnail))
										{
											<div class="image-input-wrapper" style="background-image:url('../../../../Assets/AppFiles/Images/default.png')"></div>
										}
										else
										{
											<div class="image-input-wrapper" style="background-image:url('@Model.Thumbnail')"></div>
										}
										<label class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="change" data-toggle="tooltip" title="" data-original-title="Change logo">
											<i class="fa fa-pen icon-sm text-muted"></i>
											<input type="file" id="Thumbnail" accept=".png, .jpg, .jpeg" />
											<input type="hidden" name="profile_avatar_remove" />
										</label>
										<span class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow cancelimage" data-action="cancel" data-toggle="tooltip" title="Cancel avatar">
											<i class="ki ki-bold-close icon-xs text-muted"></i>
										</span>

									</div>
									<span class="form-text text-muted">Thumbnail</span>
									<span class="form-text text-muted">Image dimensions should be 1092 x 615 pixels and Image size must be less than 200 kb</span>
								</div>

								<h3 class="font-size-lg text-dark font-weight-bold mb-6 card-label">Unit Info:</h3>
								<div class="row">


									@*<div class="col-md-1 col-sm-1">
											<div class="form-group">
												<label class="control-label">Is Published</label>
												<div class="input-group mb-2">
													<span class="switch">
														<label>

															@Html.CheckBoxFor(model => model.IsPublished, new { id = "IsPublished" })
															<span></span>
														</label>
													</span>
												</div>
												@Html.ValidationMessageFor(model => model.IsPublished, "", new { @class = "text-danger" })
											</div>
										</div>*@
									<div class="col-md-10 col-sm-10">
										<div class="form-group">
											<label class="control-label">Properties</label>
											<div class="input-group mb-3">
												@Html.DropDownList("PropertyID", null, "Select Property", htmlAttributes: new { @class = "form-control" })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-building"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.PropertyID, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-2 col-sm-2">
										<div class="form-group">
											<label class="control-label">Enable Featured</label>
											<div class="input-group mb-2">
												<span class="switch">
													<label>

														@Html.CheckBoxFor(model => model.IsFeatured, new { id = "IsFeatured" })
														<span></span>
													</label>
												</span>
											</div>
											@Html.ValidationMessageFor(model => model.IsFeatured, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-6 col-sm-12">
										<div class="form-group">
											<label class="control-label">Title</label>
											<div class="input-group mb-2">
												@Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter title here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fa fa-server"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-6 col-sm-12">
										<div class="form-group">
											<label class="control-label">Title (Ar)</label>
											<div class="input-group mb-2">
												@Html.EditorFor(model => model.TitleAr, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter title (Ar) here ...", required = "required", dir = "rtl" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fa fa-server"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.TitleAr, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-12 col-sm-12">
										<div class="form-group">
											<label class="control-label">Slug</label>
											<div class="input-group mb-3">
												@Html.EditorFor(model => model.Slug, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter slug url here ...", required = "required", @readonly = "readonly" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fa fa-link"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.Slug, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-6 col-sm-12">
										<div class="form-group">
											<label class="control-label">Description</label>
											<div class="input-group mb-3">
												@Html.TextAreaFor(model => model.Description, 3, 20, new { @class = "form-control", placeholder = "Enter description here ...", required = "required" })
												@*@Html.TextAreaFor(model => model.TitleDescriptionAr, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter description (ar) here ...", required = "required", dir = "rtl" } })*@

											</div>
											@Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-6 col-sm-12">
										<div class="form-group">
											<label class="control-label">Description(Ar)</label>
											<div class="input-group mb-3">
												@Html.TextAreaFor(model => model.DescriptionAr, 3, 20, new { @class = "form-control", placeholder = "Enter description (Ar) here ...", required = "required", dir = "rtl" })
												@*@Html.TextAreaFor(model => model.TitleDescriptionAr, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter description (ar) here ...", required = "required", dir = "rtl" } })*@

											</div>
											@Html.ValidationMessageFor(model => model.DescriptionAr, "", new { @class = "text-danger" })
										</div>
									</div>

								</div>

								<h3 class="font-size-lg text-dark font-weight-bold mb-6 card-label">Unit Details:</h3>
								<div class="row">

									<div class="col-md-12 col-sm-6">
										<div class="form-group">
											<label class="control-label">Unit No</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.UnitNo, new { htmlAttributes = new { type = "text", @class = "form-control", placeholder = "Unit no here ...", @readonly = "readonly" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-sort-numeric-up-alt"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.UnitNo, "", new { @class = "text-danger" })
										</div>
									</div>

									<!--<div class="col-md-4 col-sm-6">
									<div class="form-group">
										<label class="control-label">Status</label>
										<div class="input-group mb-2">

											<select id="Status" name="Status" class="form-control" required="required">
												<option value="">Please Select a Status</option>
												<option value="forsale" @@(Model.Status == "forsale" ? "selected" : "")>For Sale</option>
												<option value="notforsale" @@(Model.Status == "notforsale" ? "selected" : "")>Not For Sale</option>

											</select>-->
									@*@Html.EditorFor(model => model.Status, new { htmlAttributes = new { type = "text", @class = "form-control", placeholder = "Enter status here ...", required = "required" } })*@
									<!--<div class="input-group-append">
													<span class="input-group-text"><i class="fa fa-server"></i></span>
												</div>
											</div>
											@@Html.ValidationMessageFor(model => model.Status, "", new { @@class = "text-danger" })
										</div>
									</div>

									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">Property Usage</label>
											<div class="input-group mb-2">
												@@Html.EditorFor(model => model.PropertyUsage, new { htmlAttributes = new { type = "number", @@class = "form-control", placeholder = "Enter property usage url here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-sort-numeric-up-alt"></i></span>
												</div>
											</div>
											@@Html.ValidationMessageFor(model => model.PropertyUsage, "", new {@@class = "text-danger" })
										</div>
									</div>-->

									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">Unit Type</label>
											<div class="input-group mb-2">
												@Html.DropDownList("UnitTypeID", null, "Select Unit Type", htmlAttributes: new { @class = "form-control", required = "required" })

												<div class="input-group-append">
													<span class="input-group-text"><i class="fa fa-server"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.UnitTypeID, "", new { @class = "text-danger" })
										</div>
									</div>

									<div class="col-md-4 col-sm-12">
										<div class="form-group">
											<label class="control-label">SqFt</label>
											<div class="input-group mb-2">
												@Html.TextBoxFor(model => model.Size, "", new { type = "number", @class = "form-control", @step = "0.01", required = "required", placeholder = "Enter size here ...", })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-sort-numeric-up-alt"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })

										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<label class="control-label">Build Year</label>
										<div class="input-daterange input-group kt_datepicker_range">
											@Html.EditorFor(model => model.BuildYear, new { htmlAttributes = new { @class = "form-control kt_datepicker_range", type = "text", id = "BuildYear", placeholder = "yyyy", required = "required", @readonly = "readonly" } })
											<div class="input-group-append">
												<span class="input-group-text">
													<i class="fa fa-calendar"></i>
												</span>
											</div>
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">No of Bedrooms</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.NoOfBedrooms, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter bedrooms here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-sort-numeric-up-alt"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.NoOfBedrooms, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">No of Rooms</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.NoOfRooms, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter rooms  here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-sort-numeric-up-alt"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.NoOfRooms, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">No of Baths</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.NoOfBaths, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter bath here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-sort-numeric-up-alt"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.NoOfBaths, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">No of Garages (Optional)</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.NoOfGarages, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter garages here ..." } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-sort-numeric-up-alt"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.NoOfGarages, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">No of Dinning (Optional)</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.NoOfDinings, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter dinnings here ..." } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-sort-numeric-up-alt"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.NoOfDinings, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">No of Laundry (Optional)</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.NoOfLaundry, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter laundry here ..." } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-sort-numeric-up-alt"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.NoOfLaundry, "", new { @class = "text-danger" })
										</div>
									</div>

								</div>

								<h3 class="font-size-lg text-dark font-weight-bold mb-6 card-label">Payment Details:</h3>
								<div class="row">

									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">Unit Price</label>
											<div class="input-group mb-2">
												@Html.EditorFor(model => model.SellingPrice, new { htmlAttributes = new { @type = "number", @class = "form-control", placeholder = "Enter unit price here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-money-bill"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.SellingPrice, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">Booking Amount</label>
											<div class="input-group mb-2">
												@Html.EditorFor(model => model.BookingAmount, new { htmlAttributes = new { @type = "number", @class = "form-control", placeholder = "Enter booking amount  here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-money-bill"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.BookingAmount, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">Land Registration Fee (Optional)</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.LandRegistrationFee, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter land registration fee here ..." } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-money-bill"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.LandRegistrationFee, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">Oqood Amount (Optional)</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.OqoodAmount, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter oqood amount here ..." } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-money-bill"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.OqoodAmount, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-4 col-sm-6">
										<div class="form-group">
											<label class="control-label">Dubai Land Department Fee (Optional)</label>
											<div class="input-group mb-2">

												@Html.EditorFor(model => model.DubaiLandDepartmentFee, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter dubai land department fee here ..." } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-money-bill"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.DubaiLandDepartmentFee, "", new { @class = "text-danger" })
										</div>
									</div>
									@*<div class="col-md-4 col-sm-6">
											<div class="form-group">
												<label class="control-label">EMI</label>
												<div class="input-group mb-2">

													@Html.EditorFor(model => model.EMI, new { htmlAttributes = new { type = "number", @class = "form-control", placeholder = "Enter EMI here ...", required = "required" } })
													<div class="input-group-append">
														<span class="input-group-text"><i class="fas fa-money-bill"></i></span>
													</div>
												</div>
												@Html.ValidationMessageFor(model => model.EMI, "", new { @class = "text-danger" })
											</div>
										</div>*@
								</div>

								<h3 class="font-size-lg text-dark font-weight-bold mb-6 card-label">Address:</h3>
								<div class="row">

									<div class="col-md-6 col-sm-6">
										<div class="form-group">
											<label class="control-label">Countries</label>
											<div class="input-group mb-2">
												@Html.DropDownList("CountryID", null, "Select Country ", htmlAttributes: new { @class = "form-control", required = "required" })

												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-globe-asia"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.CountryID, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-6 col-sm-6">
										<div class="form-group">
											<label class="control-label">Cities</label>
											<div class="input-group mb-2">
												@Html.DropDownList("CityID", null, "Select City First ", htmlAttributes: new { @class = "form-control", required = "required" })

												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-city"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.CityID, "", new { @class = "text-danger" })
										</div>
									</div>
									@*<div class="col-md-3 col-sm-12">
											<div class="form-group">
												<label class="control-label">Areas</label>
												<div class="input-group mb-2">
													@Html.DropDownList("AreaID", null, "Select City First ", htmlAttributes: new { @class = "form-control", required = "required" })


													<div class="input-group-append">
														<span class="input-group-text"><i class="fas fa-map"></i></span>
													</div>
												</div>
												@Html.ValidationMessageFor(model => model.AreaID, "", new { @class = "text-danger" })
											</div>
										</div>*@
									<!--<div class="col-md-3 col-sm-6">
										<div class="form-group">
											<label class="control-label">Zip Code</label>
											<div class="input-group mb-2">-->
									@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
									<!--@@Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { type = "text", @@class = "form-control", placeholder = "Enter zip code here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-map-pin"></i></span>
												</div>
											</div>
											@@Html.ValidationMessageFor(model => model.ZipCode, "", new { @@class = "text-danger" })
										</div>
									</div>-->
									<div class="col-md-6 col-sm-6">
										<div class="form-group">
											<label class="control-label">Latitude</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter lat here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter latitude url here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-map-marker-alt"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-6 col-sm-6">
										<div class="form-group">
											<label class="control-label">Longitude</label>
											<div class="input-group mb-2">
												@*@Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0", min = "0.00", placeholder = "Enter price here ...", required = "required", id = "Price", value = 0, enabled = "enabled" } })*@
												@Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter longitude url here ...", required = "required" } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fas fa-map-marker"></i></span>
												</div>
											</div>
											@Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
										</div>
									</div>
									@*<div class="col-md-12 col-sm-12">
											<div class="form-group">
												<label class="control-label">Address</label>
												<div class="input-group mb-3">
													@Html.TextAreaFor(model => model.Address, 3, 20, new { type = "text", @class = "form-control", placeholder = "Enter address here ...", required = "required" })

												</div>
												@Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
											</div>
										</div>*@
								</div>

								<h3 class="font-size-lg text-dark font-weight-bold mb-6 card-label">Media:</h3>
								<div class="row">
									<div id="" class="col-md-12 col-sm-12">
										<label class="control-label">VRTour Link (Optional)</label>
										<div class="form-group">
											<div class="input-group mb-2">
												@Html.EditorFor(model => model.VRTour, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter vr tour link here ..." } })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fa fa-link"></i></span>
												</div>
											</div>
										</div>
									</div>

									<div id="video" class="col-md-4 col-sm-12">
										<div class="form-group">
											<label class="control-label">Video (Optional)</label>
											<div class="input-group mb-2">
												@Html.TextBox("VideoFile", "", new { type = "file", name = "VideoFile", @class = "form-control", @accept = "video/*" })
												<div class="input-group-append">
													<span class="input-group-text"><i class="fa fa-video"></i></span>
												</div>
											</div>
											<span class="form-text text-muted">Video Size should be less than 20 mb</span>
										</div>
									</div>

									<div class="col-md-4 col-sm-12 video-framediv">
										<div class="form-group video-frame">
											<div class="input-group mb-2">
												@if (!string.IsNullOrEmpty(Model.Video))
												{
													<div>
														<label class="control-label">Video</label>
														<span class="btn btn-circle btn-hover-text-primary btn-icon btn-white btn-pill btn-shadow btn-xs float-right mb-2" data-action="cancel" id="deletevideo" data-toggle="tooltip" title="Delete Video">
															<i class="ki ki-bold-close icon-xs text-muted"></i>
														</span>
														<center>
															<video style="width: 100%; height: 100%;" controls>
																<source src="@Url.Content(Model.Video)" type="video/mp4" name="Video" />
															</video>
														</center>
													</div>
													<input type="hidden" name="Video" id="Video" value="@Model.Video">
												}
											</div>
										</div>
									</div>

									<div class="col-md-4 col-sm-12 my-auto text-center" id="inputfiled1">
										<div class="form-group">
											<label>Floor Plan</label>
											<div></div>
											<a href="@(!string.IsNullOrEmpty(Model.FloorPlan) ? Model.FloorPlan : "#")" target="_blank" id="floorplan" class="btn btn-secondary"><i class="fa fa-eye" aria-hidden="true"></i>View Floor Plan</a>
											<input type="file" id="selectedFloorPlan" name="FloorPlan" style="display: none;" accept=".jpg, .jpeg, .png, .pdf, .doc, .docx, .xlsx" />
											<input type="button" class="btn btn-secondary" value="Browse..." onclick="document.getElementById('selectedFloorPlan').click();" />
										</div>
										File Size should be less than 20 mb
									</div>

									<div class="col-md-4 col-sm-12 my-auto text-center" id="inputfiled2">
										<div class="form-group">
											<label>Property PDF</label>
											<div></div>
											<a href="@(!string.IsNullOrEmpty(Model.Broucher) ? Model.Broucher : "#")" target="_blank" id="filename" class="btn btn-secondary"><i class="fa fa-eye" aria-hidden="true"></i>View Broucher</a>
											<input type="file" id="selectedFile" name="Broucher" style="display: none;" accept="application/pdf" />
											<input type="button" class="btn btn-secondary" value="Browse..." onclick="document.getElementById('selectedFile').click();" />
										</div>
										File Size should be less than 20 mb
									</div>

								</div>

							</form>
							<div class="card-footer text-right">
								<a href="/Admin/unit/index" class="btn btn-secondary">Back</a>
								<button type="submit" class="btn btn-custom" id="editbutton" form="editform">Save Changes</button>
							</div>
							<div class="example-preview" id="kt_blockui_content">

							</div>
							<!--end: form-->
						</div>
					</div>
					<!--end::Card-->
				</div>
			</div>

			<!--end::Dashboard-->
		</div>
		<!--end::Container-->
	</div>
	<!--end::Entry-->
</div>

<!--end::Page Scripts-->

@section IndexScript{
	@*@if (TempData["SuccessMessage"] != null)
		{
			<script>
				toastr.success('@TempData["SuccessMessage"]');
			</script>
		}
		else if (TempData["ErrorMessage"] != null)
		{
			<script>
			toastr.error('@TempData["ErrorMessage"]');

			</script>
		}*@
	<script>
           $(document).ready(function () {
            unblockui();
            KTBootstrapSelect.init();
             var str = '@Model.Video';
			str = str.toString();
			if (str == "") {
                $("#video").show();
                $(".video-frame").hide();
			}
			else if (str != null) {
                $("#video").hide();
                $(".video-frame").show();
			}
			else {
                $("#video").show();
                $(".video-frame").hide();
                    }

			let filebrowser1 = "@Model.FloorPlan";
			if (filebrowser1 != '')
			{
				$("#inputfiled1").show();
			}
			else {
				$("#floorplan").html('<i class="fa fa-upload" aria-hidden="true"></i>Upload Floor Plan');
			}

			let filebrowser2 = "@Model.Broucher";
			if (filebrowser2 != '')
			{
				$("#inputfiled2").show();
			}
			else {
				$("#filename").html('<i class="fa fa-upload" aria-hidden="true"></i>Upload Broucher');
			}
			KTImageInputDemo.init();
            KTImageInputDemo2.init();

        });
        //#region blocking ui
        function blockui() {

            $("#editchanges").addClass("spinner spinner-dark spinner-right");
            $("#editchanges").prop('disabled', true);
            $("#editchanges").html("Creating Unit");
            KTApp.blockPage({
                overlayColor: '#000000',
                state: 'primary',
                message: 'Updating Unit Please Wait...'
            });

        }
        function unblockui() {
            KTApp.unblockPage();
            $("#editchanges").removeClass("spinner spinner-dark spinner-right");
            $("#editchanges").prop('disabled', false);
            $("#editchanges").html("Submit");
        }
        //#endregion


        //#region droddownpicker
        //build year picker
        $('#PropertyID').attr("data-live-search", "true").attr("data-size", "6");
        var KTBootstrapSelect = function () {

            // Private functions
            var demos = function () {
                // minimum setup
                $('.kt-selectpicker').selectpicker();
            }

            return {
                // public functions
                init: function () {
                    demos();
                }
            };
        }();

        //#endregion

        //#region datepicker
        var arrows;
        if (KTUtil.isRTL()) {
            arrows = {
                leftArrow: '<i class="la la-angle-right"></i>',
                rightArrow: '<i class="la la-angle-left"></i>'
            }
        } else {
            arrows = {
                leftArrow: '<i class="la la-angle-left"></i>',
                rightArrow: '<i class="la la-angle-right"></i>'
            }
        }
        // Date Range
        $("#BuildYear").datepicker({
            todayHighlight: true,
            format: 'yyyy',
            viewMode: "years",
            minViewMode: "years",
        });
        //#endregion


        //#region imageintializer
        // Class images
        var KTImageInputDemo = function () {
            // Private functions
            var initDemos = function () {
                var avatar1 = new KTImageInput('kt_image_1');
            }

            return {
                // public functions
                init: function () {
                    initDemos();
                }
            };
        }();
        // Class image
        var KTImageInputDemo2 = function () {
            // Private functions
            var initDemos = function () {
                var avatar1 = new KTImageInput('kt_image_2');
            }

            return {
                // public functions
                init: function () {
                    initDemos();
                }
            };
        }();
        //#endregion

        //#region addresschange
        $('#CountryID').change(function () {
            var count = 0;
            var $dropdown = $("#CityID");
            var $dropdown1 = $("#AreaID").empty();
            $dropdown1.append($("<option />").val('').text("Please Select City First!"));
			$dropdown1.selectpicker('refresh');

            if ($(this).val() == 0) {
                $dropdown.empty();
                $dropdown.append($("<option />").val('').text("Please Select Country First!"));
				$dropdown.selectpicker('refresh');
            }
            else {
                $.ajax({
                    type: 'Get',
                    url: '/Admin/City/GetCitiesByCountry/' + $(this).val(),
                    success: function (response) {
                        $dropdown.empty();
                        $dropdown.append($("<option />").val('').text("Select City"));

                        $.each(response.data, function (k, v) {
                            $dropdown.append($("<option />").val(v.value).text(v.text));
                            count++;
                        });
						$dropdown.selectpicker('refresh');
                    }
                });
            }
        });
        $('#CityID').change(function () {
            var count = 0;
            var $dropdown = $("#AreaID");
            if ($(this).val() == 0) {
                $dropdown.empty();
                $dropdown.append($("<option />").val('').text("Please Select City First!"));
				$dropdown.selectpicker('refresh');
            }
            else {
                $.ajax({
                    type: 'Get',
                    url: '/Admin/Area/GetAreasByCity/' + $(this).val(),
                    success: function (response) {
                        $dropdown.empty();
                        $dropdown.append($("<option />").val('').text("Select Area"));

                        $.each(response.data, function (k, v) {
                            $dropdown.append($("<option />").val(v.value).text(v.text));
                            count++;
                        });
						$dropdown.selectpicker('refresh');
                    }

                });
            }
        });
        //#endregion

        var _URL = window.URL || window.webkitURL;

        //Thumbnail Image Validation Begin

        $("#Thumbnail").change(function (e) {


            var file, img;

            if ((file = this.files[0])) {

                img = new Image();
                img.onload = function () {

                    if (this.width != 1092) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
							text: 'Image dimension should be 1092 x 615 !',

                        }).then(function (result) {
                            $("#Thumbnail").attr("src", "/Assets/AppFiles/Images/default.png");
                            $(".cancelimage").trigger('click');
                        });
                    }
                    else if (this.height != 615) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Image dimension should be  1092 x 615 !',

                        }).then(function (result) {
                            $("#Thumbnail").attr("src", "/Assets/AppFiles/Images/default.png");
                            $(".cancelimage").trigger('click');
                        });
                    }
                    else if (this.size > 200000) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Image size must be less than 200 kb!',

                        }).then(function (result) {
                            $("#Thumbnail").attr("src", "/Assets/AppFiles/Images/default.png");
                            $(".cancelimage").trigger('click');
                        });
                    }
                    else {
                        img.onerror = function () {
                            $("#Thumbnail").attr("src", "/Assets/AppFiles/Images/default.png");
                            alert("not a valid file: " + file.type);
                        };
                    }
                };
                img.src = _URL.createObjectURL(file);
            }
        });
        //Image Validation End

        //Image Validation End

		//Floor Plan Validation Begin
		$("#selectedFloorPlan").change(function () {
			var file, doc;

			if ((file = this.files[0])) {
				doc = this.files[0];

				if (doc.size > 20 * (1000000)) {
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'File Size Should be Lower than 20MB!',

					}).then(function (result) {
						$("#selectedFloorPlan").val('');
					});

				}
				else {
					doc.onerror = function () {
						alert("not a valid file: " + file.type);
					};
				}
				$("#floorplan").html('<i class="fa fa-eye" aria-hidden="true"></i>View New File Uploaded');
				$("#floorplan").attr('href', URL.createObjectURL(file));
				doc.src = _URL.createObjectURL(file);
			}

		});
		//Floor Plan Validation End

        //Property Pdf Validation Begin
		$("#selectedFile").change(function () {
			var file, doc;

			if ((file = this.files[0])) {
				doc = this.files[0];

				if (doc.size > 20 * (1000000)) {
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'Pdf File Size Should be Lower than 20MB!',

					}).then(function (result) {
						$("#selectedFile").val('');
					});

				}
				else if (doc.type != "application/pdf") {
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'Please Upload Pdf files only !',

					}).then(function (result) {
						$("#selectedFile").val('');
					});
				}
				else {
					doc.onerror = function () {
						alert("not a valid file: " + file.type);
					};
				}
				$("#filename").html('<i class="fa fa-eye" aria-hidden="true"></i>View New File Uploaded');
				$("#filename").attr('href', URL.createObjectURL(file));
				doc.src = _URL.createObjectURL(file);
			}

		});
        //Property Pdf Validation End

        //video validation
		$("#Video").change(function (e) {

			var file;

			if ((file = this.files[0])) {

				if (!file.type.match('video.*')) {
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'Please upload valid video file !',

					}).then(function (result) {
						$("#Video").val("");
					});
				}
				else if (file.size >= 20 * (1000000)) {
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'Video size must be less than 10 MB!',

					}).then(function (result) {
						$("#Video").val("");
					});
				}
			}

		});
        $("#deletevideo").click(function () {
            $(".video-frame").hide();
            $(".video-framediv").hide();
            $("#video").show();
			$("input[name=Video][type=hidden]").remove();
        })
        // vrvideo validation
        
        $("#deletevrtour").click(function () {
            $(".video-frame1").hide();
            $(".video-framediv1").hide();
            $("#vrtourf").show();
			$("input[name=VRTour][type=hidden]").remove();
        })


        //slig genearte for title
        $("#Title").on('change', function () {
            var name = $(this);
            $("#Slug").val($(name).val().replace(/ /g, "-").replace(/'/g, "").toLocaleLowerCase());
        });


        //validate lat long
        function ValidateLatLng() {
            var lat = document.getElementById("Latitude").value;
            var lng = document.getElementById("Longitude").value;
            if (lat < -90 || lat > 90) {
                toastr.error("Latitude must be between -90 and 90 degrees inclusive.");
                return false;
            }
            else if (lng < -180 || lng > 180) {
                toastr.error("Longitude must be between -180 and 180 degrees inclusive.");
                return false;
            }
            else if (lat == "" || lng == "") {
                toastr.error("Enter a valid Latitude or Longitude!");
                return false;
            } else if (isNaN(lat || isNaN(lng))) {
                toastr.error("Enter a valid Latitude or Longitude!");
                return false;
            }
            return true;
        }
        //edit form
        $("#editform").submit(function (e) {

            //   $(this).closest('.modal').find('button[type=submit]').addClass('spinner spinner-sm spinner-left').attr('disabled', true);

            e.preventDefault();
            if (!ValidateLatLng()) {
                return false
            }
            var data = new FormData();
            data.append("ID", $("#ID").val());
            data.append("PropertyID", $("#PropertyID").val());
            data.append("IsFeatured", $("#IsFeatured").prop("checked"));
            var thumbnail = $("#Thumbnail").val();
            if (thumbnail != "") {
                data.append("Thumbnail", $("#Thumbnail")[0].files[0]);
            }

            data.append("Title", $('#Title').val());
            data.append("TitleAr", $('#TitleAr').val());
            data.append("Description", $('#Description').val());
            data.append("DescriptionAr", $('#DescriptionAr').val());
            data.append("Slug", $('#Slug').val());
            //data.append("Status", $("#Status").val());
            //data.append("PropertyUsage", $("#PropertyUsage").val());
            data.append("Size", $("#Size").val());
            data.append("UnitTypeID", $("#UnitTypeID").val());
            data.append("NoOfBedrooms", $("#NoOfBedrooms").val());
            data.append("NoOfGarages", $("#NoOfGarages").val());
            data.append("NoOfRooms", $("#NoOfRooms").val());
            data.append("NoOfBaths", $("#NoOfBaths").val());
            data.append("NoOfDinings", $("#NoOfDinings").val());
            data.append("NoOfLaundry", $("#NoOfLaundry").val());
            data.append("BuildYear", $("#BuildYear").val());
            data.append("SellingPrice", $("#SellingPrice").val());
			data.append("BookingAmount", $("#BookingAmount").val());
            data.append("LandRegistrationFee", $("#LandRegistrationFee").val());
            data.append("OqoodAmount", $("#OqoodAmount").val());
            data.append("DubaiLandDepartmentFee", $("#DubaiLandDepartmentFee").val());
            data.append("CountryID", $("#CountryID").val());
            data.append("CityID", $("#CityID").val());
            //data.append("AreaID", $("#AreaID").val());
            //data.append("ZipCode", $("#ZipCode").val());
            data.append("Latitude", $("#Latitude").val());
            data.append("Longitude", $("#Longitude").val());
			data.append("VRTour", $('#VRTour').val());
            //data.append("Address", $("#Address").val());

            //var video = $("#Video").val();
            //if (video != "")
            //{
            //    data.append("Video", $("#Video")[0].files[0]);
            //}

            //var vrtour = $("#VRTour").val();
            //if (vrtour != "") {
            //    data.append("VRTour", $("#VRTour")[0].files[0]);
            //}

			var video = $("#VideoFile").val();
			if (video != '') {
				data.append("VideoFile", $("#VideoFile")[0].files[0]);

			}
			if ($("#Video").val()) {
				data.append("Video", $("#Video").val());
			}
			
			let floorplan = $("#FloorPlan").val();
			if (floorplan != '' && $("#selectedFloorPlan")[0]) {
				data.append("FloorPlan", $("#selectedFloorPlan")[0].files[0]);
			}

			let broucher = $("#selectedFile").val();
			if (broucher != '' && $("#selectedFile")[0]) {
				data.append("Broucher", $("#selectedFile")[0].files[0]);
			}

            data.append("__RequestVerificationToken", $('input[name=__RequestVerificationToken]').val());
            blockui();
            $.ajax({
                url: "/Admin/Unit/Edit/",
                type: "POST",
                processData: false,
                contentType: false,
                data: data,
                success: function (response) {

                    if (response.success) {

                        unblockui();
                        window.location.href = response.url.toString();
                    } else {

                        unblockui();
                        toastr.error(response.message);
                    }

                },
                error: function (er) {

                    unblockui();
                    toastr.error(er);
                }
            });
            return false;
        });
	</script>
}
<!--end::Page Scripts-->
