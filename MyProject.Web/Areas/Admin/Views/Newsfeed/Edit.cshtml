@model MyProject.Data.NewsFeed


@{
	ViewBag.Title = "Edit";
	Layout = null;
}
<link href="~/Assets/Admin/plugins/custom/richtextarea/rte_theme_default.css" rel="stylesheet" />
<style>
	.video-frame {
		width: 100%;
		height: auto;
		box-shadow: 0 0.5rem 1.5rem 0.5rem rgb(0 0 0 / 8%);
		border-radius: 5px;
		padding: 10px;
	}
	.introduction-video {
		width: auto;
		height: 500px;
		margin-left: auto;
		margin-right: auto;
		display: block;
	}
</style>


<div class="modal-header">
	<h5 class="modal-title">Update</h5>
	<button type="button" class="close" data-dismiss="modal" aria-label="Close">
		<i aria-hidden="true" class="ki ki-close"></i>
	</button>
</div>
<div class="modal-body">
	<form id="editform" action="/Admin/NewsFeed/Edit/" name="form" enctype="multipart/form-data" class="form-file-custom" onsubmit="return form_file_custom(this)">
		@Html.AntiForgeryToken()
		<div class="alert alert-danger text-center" id="divMessage" style="display:none"></div>
		@Html.HiddenFor(model => model.ID)
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		<div class="form-group row">
			<div class="col-lg-12 text-center">
				<div class="image-input image-input-outline" id="kt_image_1">
					@if (string.IsNullOrEmpty(Model.BannerImage))
					{
						<div class="image-input-wrapper" style="background-image:url('/Assets/AppFiles/Images/default.png')"></div>
					}
					else
					{
						<div class="image-input-wrapper" style="background-image:url('@Model.BannerImage.Replace("~","")')"></div>
					}
					<label class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="change" data-toggle="tooltip" title="" data-original-title="Change logo">
						<i class="fa fa-pen icon-sm text-muted"></i>
						<input type="file" name="BannerImage" id="cover" accept=".png, .jpg, .jpeg" class="img-upload" value="@Model.BannerImage" data-width="1200" data-height="800" data-size="500" @*500 kb*@ onchange="imgUpload(this);" />
						<input type="hidden" name="profile_avatar_remove" />
					</label>
					<span class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow cancelimage" data-action="cancel" data-toggle="tooltip" title="Cancel avatar">
						<i class="ki ki-bold-close icon-xs text-muted"></i>
					</span>
				</div>
				<span class="form-text text-muted">Image dimensions should be 1200 x 800 pixels and Image size must be less than 500 kb</span>
			</div>
		</div>
        <div class="row">


            <div class="col-md-12 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Title</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter title here ..." } })
                        <div class="input-group-append"><span class="input-group-text"><i class="fa fa-server"></i></span></div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Title (Ar)</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.TitleAr, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = " ...Enter title (Ar) here", dir = "rtl" } })
                        <div class="input-group-append"><span class="input-group-text"><i class="fa fa-server"></i></span></div>
                    </div>
                    @Html.ValidationMessageFor(model => model.TitleAr, "", new { @class = "text-danger" })
                </div>
            </div>*@
            <div class="col-md-12 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Description</label>
                    <div class="input-group mb-2">
                        @*@Html.HiddenFor(model => model.TitleDescription)*@
                        @*<div id="TitleDescriptionTXT" class="richtexteditor"></div>*@
                        @Html.TextAreaFor(model => model.TitleDescription, new { @class = "form-control", rows = "2", placeholder = "Enter description here ..." })
                    </div>
                    @Html.ValidationMessageFor(model => model.TitleDescription, "", new { @class = "text-danger" })
                </div>
            </div>
            <!--<div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Description(Ar)</label>
                    <div class="input-group mb-3">-->
                        @*@Html.HiddenFor(model => model.TitleDescriptionAr)*@
                        @*<div id="TitleDescriptionArTXT" class="richtexteditor"></div>*@
                        <!--@Html.TextAreaFor(model => model.TitleDescriptionAr, new { @class = "form-control", rows = "2", placeholder = " ...Enter title (Ar) here", dir = "rtl" })
                    </div>
                    @Html.ValidationMessageFor(model => model.TitleDescriptionAr, "", new { @class = "text-danger" })
                </div>
            </div>-->
            <div class="col-md-12 d-flex justify-content-center mb-12">
                <div class="col-md-8 col-sm-12">
                    @if (!string.IsNullOrEmpty(Model.Video))
                    {
                        <div class="video-frame">
                            <span class="btn btn-circle btn-hover-text-primary btn-icon btn-white btn-pill btn-shadow btn-xs float-right mb-2" data-action="cancel" id="deletevideo" data-toggle="tooltip" title="Delete Video" for="video-1" onclick="videoDelete(this)">
                                <i class="ki ki-bold-close icon-xs text-muted"></i>
                            </span>
                            <video controls class="introduction-video w-100">
                                <source src="@Url.Content(Model.Video)" type="video/mp4" />
                            </video>
                        </div>
                    }
                </div>
            </div>
            <div id="video" class="col-md-6 col-sm-12 video-1">
                <div class="form-group">
                    <label class="control-label">Video</label>
                    <div class="input-group mb-2">
                        <input class="h-100 form-control video-upload" id="Video" name="Video" onchange="videoUpload(this)" type="file" value="@Model.Video" data-size="4" accept="video/mp4,video/x-m4v,video/*">
                        @*@Html.TextBox("Video", "", new { type = "file", name = "Video", @class = "form-control video-upload", @data_size = "4" /*4 mb*/, @onchange = "videoUpload(this)" })*@
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-video"></i></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Host</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.Host, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter host here ..." } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-users"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Host, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <br />
            <br />
            <br />
            <div class="col-md-6 col-sm-12">
                <label class="control-label">Event Date</label>
                <div class="input-daterange input-group kt_datepicker_range">
                    @Html.EditorFor(model => model.EventDate, new { htmlAttributes = new { @class = "form-control required-custom kt_datepicker_range date-format-1", type = "text", id = "EventDate", placeholder = " MM/DD/YYYY" } })
                    <div class="input-group-append">
                        <span class="input-group-text">
                            <i class="fa fa-calendar"></i>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Twitter Url</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.TwitterUrl, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter twitter url here ..." } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fab fa-twitter"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.TwitterUrl, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Facebook URL</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.FacebookURL, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter facebook url here ..." } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fab fa-facebook"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.FacebookURL, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">LinkedIn Url</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.LinkedinURL, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter linkedin url here ..." } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fab fa-linkedin"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.LinkedinURL, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Instagram Url</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.InstagramURL, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter instagram url here ..." } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fab fa-instagram"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.InstagramURL, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Email Address</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter email address here ..." } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-envelope"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="col-md-6 col-sm-6">
                <div class="form-group">
                    <label class="control-label">Post Position</label>
                    <div class="input-group mb-2">
                        @Html.TextBoxFor(model => model.Position, new { @type = "number", @class = "form-control", placeholder = "Enter position here...", @min = "0", @max = "100000" })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-sort-numeric-up"></i></span>
                        </div>
                    </div>

                    @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <label class="control-label">Posted Date</label>
                <div class="input-daterange input-group kt_datepicker_range">
                    @Html.EditorFor(model => model.PostedDate, "{MM/dd/yyyy}", new { htmlAttributes = new { @class = "form-control required-custom kt_datepicker_range date-format-1", type = "text", id = "PostedDate", placeholder = " MM/DD/YYYY" } })
                    <div class="input-group-append">
                        <span class="input-group-text">
                            <i class="fa fa-calendar"></i>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-md-2 col-sm-6">
                <div class="form-group">
                    <label class="control-label">Enable Featured</label>
                    <div class="input-group mb-2">
                        <span class="switch">
                            <label>
                                @if (Model.IsFeatured != null && Model.IsFeatured == true)
                                {
                                    @Html.CheckBox("IsFeatured", true)
                                }
                                else
                                {
                                    @Html.CheckBox("IsFeatured", false)
                                }
                                <span></span>
                            </label>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.IsFeatured, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
	</form>
</div>

<div class="modal-footer">
	<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
	<button type="submit" class="btn btn-custom" form="editform">Save Changes</button>
</div>

<!--end::Page Scripts-->
<script src="~/Assets/Admin/plugins/custom/richtextarea/rte.js"></script>
<script src="~/Assets/Admin/plugins/custom/richtextarea/all_plugins.js"></script>
<script src="~/Assets/Admin/plugins/custom/richtextarea/rte-upload.js"></script>
<script>
    'use strict';

    $(document).ready(function () {

        var d = $("#PostedDate").val();
        d = d.split(' ')[0];
		$("#PostedDate").val(d);

		//#region Rich Text editor configuration
		//let editor1 = new RichTextEditor(document.getElementById("TitleDescriptionTXT"));
		//let editor2 = new RichTextEditor(document.getElementById("TitleDescriptionArTXT"));

		//editor1.setHTMLCode($('#TitleDescription').val());
		//editor2.setHTMLCode($('#TitleDescriptionAr').val());

		//editor1.attachEvent("change", function () {
		//	document.getElementById("TitleDescription").value = editor1.getHTMLCode();
		//});
		//editor2.attachEvent("change", function () {
		//	document.getElementById("TitleDescriptionAr").value = editor2.getHTMLCode();
		//});
		//$('.rte_command_insertimage').hide()
		//$('.rte_command_insertvideo').hide()
		//$('.rte_command_insertdocument').hide()
		//#endregion

    });

    // Class definition
    var KTImageInputDemo = function () {
        // Private functions
        var initDemos = function () {
            var avatar1 = new KTImageInput('kt_image_1');
        }

        return {
            // public functions
            init: function () {
                initDemos();
            }
        };
    }();

    KTUtil.ready(function () {

        var str = '@Model.Video';
        str = str.toString();
        if (str == "") {
            $("#video").show();
        }
        else if (str != null) {
            $("#video").hide();
        }
        else {
            $("#video").show();
        }
        KTImageInputDemo.init();
        setTimeout(function () { dateFormat(1); }, 500);

    });

    //event date plugin
    var arrows;
    if (KTUtil.isRTL()) {
        arrows = {
            leftArrow: '<i class="la la-angle-right"></i>',
            rightArrow: '<i class="la la-angle-left"></i>'
        }
    } else {
        arrows = {
            leftArrow: '<i class="la la-angle-left"></i>',
            rightArrow: '<i class="la la-angle-right"></i>'
        }
    }

    // Date Range

    //$('.kt_datepicker_range').datepicker({
    //    rtl: KTUtil.isRTL(),
    //    todayHighlight: true,
    //    templates: arrows,
    //    startDate: '0d',
    //    //format: 'dd/mm/yyyy',
    //});

    $("#PostedDate").datepicker({
        todayHighlight: true,
        format: 'dd MM yyyy',
    });
    $("#EventDate").datepicker({
        todayHighlight: true,
        format: 'dd MM yyyy',
    });

</script>
