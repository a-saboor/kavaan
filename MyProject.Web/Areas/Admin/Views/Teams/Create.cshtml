@model MyProject.Data.Team


@{
    ViewBag.Title = "Create";
    Layout = null; }
<!--begin::Content-->
<div class="modal-header">
    <h5 class="modal-title">Create</h5>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <i aria-hidden="true" class="ki ki-close"></i>
    </button>
</div>
<form id="create">
    <div class="modal-body">

        @Html.AntiForgeryToken()
        <div class="alert alert-danger text-center" id="divMessage" style="display:none"></div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group row">
            <div class="col-lg-12 text-center">
                <div class="image-input image-input-outline" id="kt_image_1">
                    <div class="image-input-wrapper" style="background-image: url('../../../../Assets/AppFiles/Images/default.png')"></div>
                    <label class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="change" data-toggle="tooltip" title="" data-original-title="Change logo">
                        <i class="fa fa-pen icon-sm text-muted"></i>
                        @*<input type="file" name="Image" id="cover" accept=".png, .jpg, .jpeg" />*@
                        <input type="file" name="Image" class="img-upload" data-width="200" data-height="200" data-size="200" id="cover" accept=".png, .jpg, .jpeg" onchange="imgUpload(this);" />
                        <input type="hidden" name="profile_avatar_remove" />
                    </label>
                    <span class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow cancelimage" data-action="cancel" data-toggle="tooltip" title="Cancel avatar">
                        <i class="ki ki-bold-close icon-xs text-muted"></i>
                    </span>
                </div>
                <span class="form-text text-muted">Image dimensions should be 200 x 200 pixels and Image size must be less than 200 kb</span>
            </div>
        </div>
        <div class="row">

            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Name</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter name here ..." } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-tag"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Name (Ar)</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.NameAr, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter name (Ar) here ...", dir = "rtl" } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-tag"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.NameAr, "", new { @class = "text-danger" })
                </div>
            </div>*@

            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Designation</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter designation here ..." } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-user"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Designation (Ar)</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.DesignationAr, new { htmlAttributes = new { @class = "form-control required-custom", placeholder = "Enter designation (Ar) here ...", dir = "rtl" } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-user"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.DesignationAr, "", new { @class = "text-danger" })
                </div>
            </div>*@


            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Email Address</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.Email, new
				   {
					   htmlAttributes = new
					   {
						   @class = "form-control required-custom",
						   placeholder = "Enter email address here ...",
						   @type = "email",
						   @oninvalid = "checkValidation(this,false)",
						   @oninput = "checkValidation(this,true)"
					   }
				   })

                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-envelope"></i></span>
                        </div>
                    </div>
                    <label id="validationMsg" class="text-danger"></label>
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Joining Date</label>
                    <div class="input-group mb-2">
                        @Html.EditorFor(model => model.JoiningDate, new { htmlAttributes = new { @type = "text", @class = "form-control kt_datepicker_range", placeholder = "dd MM YYYY select joining date...", @readonly = "readonly" } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.JoiningDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Contact 1</label>
                    <div class="input-group mb-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">+92</span>
                        </div>
                        @Html.EditorFor(model => model.Contact1, new { htmlAttributes = new { @type = "text", @class = "form-control required-custom", placeholder = "Enter contact 1 here ...", @maxLength = "10", @minlength = "9", onkeypress = "validate(event)" } })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-phone"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Contact1, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Contact 2</label>
                    <div class="input-group mb-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">+92</span>
                        </div>
                        @Html.TextBoxFor(model => model.Contact2, new { @type = "text", @class = "form-control", placeholder = "Enter contact 2 here...", @maxLength = "10", @minlength = "9", onkeypress = "validate(event)" })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-phone"></i></span>
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Contact2, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">About</label>
                    <div class="input-group mb-2">
                        @Html.TextAreaFor(model => model.About, new { @class = "form-control", rows = "2", @placeholder = "Enter about here ..." })

                    </div>
                    @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">About (Ar)</label>
                    <div class="input-group mb-2">
                        @Html.TextAreaFor(model => model.AboutAr, new { @class = "form-control", rows = "2", @placeholder = "Enter description here ...", dir = "rtl" })

                    </div>
                    @Html.ValidationMessageFor(model => model.AboutAr, "", new { @class = "text-danger" })
                </div>
            </div>*@
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    <label class="control-label">Address</label>
                    <div class="input-group mb-2">
                        @Html.TextAreaFor(model => model.Address, new { @class = "form-control", rows = "2", placeholder = "Enter address here ..." })
                    </div>
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="submit" class="btn btn-custom" id="createbtn">Submit</button>
    </div>
</form>

<!--end::Row-->
<script>
    var SuccessMessage = '@ViewBag.SuccessMessage';
    var ErrorMessage = '@ViewBag.ErrorMessage';
</script>





<!--end::Page Scripts-->

<script>
    // Class definition
    //build year picker

    function validate(evt) {
        
        var theEvent = evt || window.event;

        // Handle paste
        if (theEvent.type === 'paste') {
            key = event.clipboardData.getData('text/plain');
        } else {
            // Handle key press
            var key = theEvent.keyCode || theEvent.which;
            key = String.fromCharCode(key);
        }
        var regex = /[0-9]|\./;
        if (!regex.test(key)) {
            theEvent.returnValue = false;
            if (theEvent.preventDefault) theEvent.preventDefault();
        }
    }

    $('#Contact1').keyup(function () {
        contactValidation(this);
    });
    $('#Contact2').keyup(function () {
        contactValidation(this);
    });

    var arrows;
    if (KTUtil.isRTL()) {
        arrows = {
            leftArrow: '<i class="la la-angle-right"></i>',
            rightArrow: '<i class="la la-angle-left"></i>'
        }
    } else {
        arrows = {
            leftArrow: '<i class="la la-angle-left"></i>',
            rightArrow: '<i class="la la-angle-right"></i>'
        }
    }
    // Date Range
    $("#JoiningDate").datepicker({
        todayHighlight: true,
        format: 'dd M yyyy',
        viewMode: "dd MM yyyy",

    });
    var KTImageInputDemo = function () {
        // Private functions
        var initDemos = function () {

            var avatar1 = new KTImageInput('kt_image_1');
        }

        return {
            // public functions
            init: function () {
                initDemos();
            }
        };
    }();

    'use strict';
    KTUtil.ready(function () {
        KTImageInputDemo.init();


    });


    //var _URL = window.URL || window.webkitURL;
    ////Image Validation Begin
    //$("#cover").change(function (e) {


    //    var file, img;

    //    if ((file = this.files[0])) {

    //        img = new Image();
    //        img.onload = function () {

    //            if (this.width < 200 || this.width > 200) {
    //                Swal.fire({
    //                    icon: 'error',
    //                    title: 'Oops...',
    //                    text: 'Image dimension should be 200 x 200 !',

    //                }).then(function (result) {
    //                    $("#cover").attr("src", "/Assets/AppFiles/Images/default.png");
    //                    $(".cancelimage").trigger('click');
    //                });
    //            }
    //            else if (this.height < 200 || this.height > 200) {
    //                Swal.fire({
    //                    icon: 'error',
    //                    title: 'Oops...',
    //                    text: 'Image dimension should be 200 x 200 !',

    //                }).then(function (result) {
    //                    $("#cover").attr("src", "/Assets/AppFiles/Images/default.png");
    //                    $(".cancelimage").trigger('click');
    //                });
    //            }
    //            else if (this.size > 200000) {
    //                Swal.fire({
    //                    icon: 'error',
    //                    title: 'Oops...',
    //                    text: 'Image size must be less than 200 kb!',

    //                }).then(function (result) {
    //                    $("#cover").attr("src", "/Assets/AppFiles/Images/default.png");
    //                    $(".cancelimage").trigger('click');
    //                });
    //            }
    //            else {
    //                img.onerror = function () {
    //                    alert("not a valid file: " + file.type);
    //                };
    //            }
    //        };
    //        img.src = _URL.createObjectURL(file);
    //    }
    //});
    ////Image Validation End
    $("#create").submit(function (event) {

        event.preventDefault();
        if (!emailValidation || !contactValidation($("#Contact1")) || !contactValidation($("#Contact2")))
            return;
        var data = new FormData();
        data.append("__RequestVerificationToken", $('input[name=__RequestVerificationToken]').val());
        data.append("Image", $("#cover")[0].files[0]);
        data.append("Name", $("#Name").val());
        data.append("NameAr", $("#NameAr").val());
        data.append("Designation", $("#Designation").val());
        data.append("DesignationAr", $("#DesignationAr").val());
        data.append("Address", $("#Address").val());
        data.append("Email", $("#Email").val());
        data.append("Contact1", $("#Contact1").val());
        data.append("Contact2", $("#Contact2").val());
        data.append("About", $("#About").val());
        data.append("AboutAr", $("#AboutAr").val());
        data.append("JoiningDate", $("#JoiningDate").val());
        $.ajax({
            url: "/admin/Teams/Create/",
            type: "POST",
            processData: false,
            contentType: false,
            data: data,
            success: function (response) {

                if (callback) {
                    callback($('#myModalContent'), element, true, response);
                }
            },
            error: function (er) {
                toastr.error(er);
            }
        });

    });
    if (SuccessMessage) {
        toastr.success(SuccessMessage);
    }
    else if (ErrorMessage) {
        toastr.error(ErrorMessage);
    }

	var emailValidation = true;
	function checkValidation(elem, flag) {
		if (flag) {
			emailValidation = true;
			$(elem).removeClass('border border-danger').closest('.form-group').find('.field-validation-valid').text('');
		}
		else {
			emailValidation = false;
			$(elem).addClass('border border-danger').closest('.form-group').find('.field-validation-valid').text('Invalid email, please enter valid email.');
		}
	}

	function contactValidation(elem) {
		var value = $(elem).val();

		if (value.length == 10) {
			//true condition
			$(elem).removeClass("border border-danger");
			//elem.setCustomValidity('');
			return true;
		}
		else {
			$(elem).addClass("border border-danger");
			//elem.setCustomValidity('Please lengthen this text to 9 characters.');
			return false;
		}
	}
</script>

<!--end::Page Scripts-->
